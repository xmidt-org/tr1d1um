/**
 * Copyright 2022 Comcast Cable Communications Management, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package translation

import (
	context "context"
	"net/http"

	transaction "github.com/xmidt-org/tr1d1um/transaction"

	mock "github.com/stretchr/testify/mock"

	wrp "github.com/xmidt-org/wrp-go/v3"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// SendWRP provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockService) SendWRP(_a0 context.Context, _a1 *wrp.Message, _a2 string) (*transaction.XmidtResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *transaction.XmidtResponse
	if rf, ok := ret.Get(0).(func(context.Context, *wrp.Message, string) *transaction.XmidtResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.XmidtResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wrp.Message, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTr1d1umTransactor is an autogenerated mock type for the Tr1d1umTransactor type
type MockTr1d1umTransactor struct {
	mock.Mock
}

// Transact provides a mock function with given fields: _a0
func (_m *MockTr1d1umTransactor) Transact(_a0 *http.Request) (*transaction.XmidtResponse, error) {
	ret := _m.Called(_a0)

	var r0 *transaction.XmidtResponse
	if rf, ok := ret.Get(0).(func(*http.Request) *transaction.XmidtResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.XmidtResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
